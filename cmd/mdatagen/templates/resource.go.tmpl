// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pentity"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res	pcommon.Resource
	ent pentity.EntityEvent
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
    ent := pentity.NewEntityEvent()
    ent.SetEmptyEntityState()
    ent.SetEntityType("{{ .Entity.Type }}")

	return &ResourceBuilder{
		config: rac,
		res: pcommon.NewResource(),
		ent: ent,
	}
}

{{- range $name, $attr := .ResourceAttributes }}
{{- range $attr.Enum }}
// Set{{ $name.Render }}{{ . | publicVar }} sets "{{ $name }}={{ . }}" attribute.
func (rb *ResourceBuilder) Set{{ $name.Render }}{{ . | publicVar }}() {
	if rb.config.{{ $name.Render }}.Enabled {
		rb.res.Attributes().PutStr("{{ $name }}", "{{ . }}")
		{{- if eq $attr.EntityIdentifying true }}
        rb.ent.Id().PutStr("{{ $name }}", "{{ . }}")
        {{- end }}
	}
}
{{- else }}
// Set{{ $name.Render }} sets provided value as "{{ $name }}" attribute.
func (rb *ResourceBuilder) Set{{ $name.Render }}(val {{ $attr.Type.Primitive }}) {
	if rb.config.{{ $name.Render }}.Enabled {
		{{- if or (eq $attr.Type.String "Bytes") (eq $attr.Type.String "Slice") (eq $attr.Type.String "Map") }}
		rb.res.Attributes().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		{{- else }}
		rb.res.Attributes().Put{{ $attr.Type }}("{{ $name }}", val)
		{{- end }}
		{{- if eq $attr.EntityIdentifying true }}
		{{- if or (eq $attr.Type.String "Bytes") (eq $attr.Type.String "Slice") (eq $attr.Type.String "Map") }}
		rb.ent.Id().PutEmpty{{ $attr.Type }}("{{ $name }}").FromRaw(val)
		{{- else }}
		rb.ent.Id().Put{{ $attr.Type }}("{{ $name }}", val)
		{{- end }}
        {{- end }}
	}
}
{{- end }}
{{ end }}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
